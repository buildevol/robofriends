{"version":3,"sources":["components/CardList.js","components/Card.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","React","Component","Error","SearchBox","Fragment","className","type","placeholder","onChange","this","props","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchField","target","value","robots","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gSAuBeA,GCrBIC,IAAMC,U,uKDInB,MAAM,IAAIC,MAAM,a,GAHCF,IAAMC,YEgBdE,E,uKAfX,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUC,KAAKC,MAAMC,qB,GATTX,IAAMC,WCmBfW,E,uKAhBX,OACE,kBAAC,IAAMR,SAAP,KACE,yBACES,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTP,KAAKC,MAAMO,e,GAZDjB,IAAMC,WCqBZiB,E,kDApBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAU,GAHA,E,8DAQIC,EAAOC,GACvBb,KAAKc,SAAS,CAAEH,UAAU,M,+BAI1B,OAAIX,KAAKU,MAAMC,SACN,6DAEFX,KAAKC,MAAMO,a,GAjBMjB,IAAMC,WCyDnBuB,G,wDAlDb,aAAe,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GAEhB,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SAnB1C,EAAKV,MAAQ,CACXW,OAAQ,GACRH,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKZ,SAAS,CAAEO,OAAQK,S,+BAUpB,IAAD,OACDC,EAAiB3B,KAAKU,MAAMW,OAAOO,QAAO,SAACC,GAC/C,OAAOA,EAAMC,KACVC,cACAC,SAAS,EAAKtB,MAAMQ,YAAYa,kBAErC,OAAiC,IAA7B/B,KAAKU,MAAMW,OAAOY,OACb,uCAGL,kBAAC,IAAMtC,SAAP,KACE,yBAAKC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWM,aAAcF,KAAKgB,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUK,OAAQM,Y,GA1ChBpC,IAAMC,YCKJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.72a672f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nclass CardList extends React.Component {\r\n  render() {\r\n    if (true) {\r\n      throw new Error(\"Hello\");\r\n    }\r\n    const cardArray = this.props.robots.map((user, index) => {\r\n      return (\r\n        //   Loop should have a unique key in React so the virtual dom knows which to remove easily Note: The key should be something that does not change\r\n        <Card\r\n          key={this.props.robots[index].id}\r\n          id={this.props.robots[index].id}\r\n          name={this.props.robots[index].name}\r\n          email={this.props.robots[index].email}\r\n        />\r\n      );\r\n    });\r\n    return <div>{cardArray}</div>;\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nclass Card extends React.Component {\r\n  render() {\r\n    // destructuring\r\n    const { name, email, id } = this.props;\r\n    return (\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n        {/* The usage of React Fragment instead of div for better readability\r\n        similar to semantic html https://reactjs.org/docs/fragments.html\r\n        http://blog.jmes.tech/react-fragment-and-semantic-html/ */}\r\n        <React.Fragment>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nclass SearchBox extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"pa2\">\r\n          <input\r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"Search Robots\"\r\n            onChange={this.props.searchChange}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nclass Scroll extends React.Component {\r\n  render() {\r\n    // children to wrap other element\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          style={{\r\n            overflowY: \"scroll\",\r\n            border: \"1px solid black\",\r\n            height: \"800px\",\r\n          }}\r\n        >\r\n          {this.props.children}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  // Similar to try catch block\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops, an error is encountered</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  // State usually live in the parent component\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json(); // return the json\r\n      })\r\n      .then((users) => {\r\n        this.setState({ robots: users }); // set the state to the returned json\r\n      });\r\n  }\r\n\r\n  // When using this keyword in new methods on a component we should use arrow function so this refers to where it is created.\r\n  onSearchChange = (event) => {\r\n    // Always use this.setState to set state.\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"tc\">\r\n            <h1 className=\"f1\">Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n              <ErrorBoundary>\r\n                <CardList robots={filteredRobots} />\r\n              </ErrorBoundary>\r\n            </Scroll>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./fonts.css\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\n// import Hello from './Hello';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}